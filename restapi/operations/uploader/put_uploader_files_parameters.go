// Code generated by go-swagger; DO NOT EDIT.

package uploader

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutUploaderFilesMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var PutUploaderFilesMaxParseMemory int64 = 32 << 20

// NewPutUploaderFilesParams creates a new PutUploaderFilesParams object
//
// There are no default values defined in the spec.
func NewPutUploaderFilesParams() PutUploaderFilesParams {

	return PutUploaderFilesParams{}
}

// PutUploaderFilesParams contains all the bound params for the put uploader files operation
// typically these are obtained from a http.Request
//
// swagger:parameters PutUploaderFiles
type PutUploaderFilesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*alternative text
	  In: formData
	*/
	Alt *string
	/*image caption
	  In: formData
	*/
	Caption *string
	/*The file to upload.
	  In: formData
	*/
	File io.ReadCloser
	/*image height
	  In: formData
	*/
	Height *float64
	/*existing file id
	  In: formData
	*/
	ID *string
	/*image name
	  In: formData
	*/
	Name *string
	/*image chapter
	  In: formData
	*/
	Provider *string
	/*image size in bytes
	  In: formData
	*/
	Size *float64
	/*mime type
	  In: formData
	*/
	Type *string
	/*image width
	  In: formData
	*/
	Width *float64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutUploaderFilesParams() beforehand.
func (o *PutUploaderFilesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(PutUploaderFilesMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAlt, fdhkAlt, _ := fds.GetOK("alt")
	if err := o.bindAlt(fdAlt, fdhkAlt, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCaption, fdhkCaption, _ := fds.GetOK("caption")
	if err := o.bindCaption(fdCaption, fdhkCaption, route.Formats); err != nil {
		res = append(res, err)
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "file", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else if err := o.bindFile(file, fileHeader); err != nil {
		res = append(res, err)
	} else {
		o.File = &runtime.File{Data: file, Header: fileHeader}
	}

	fdHeight, fdhkHeight, _ := fds.GetOK("height")
	if err := o.bindHeight(fdHeight, fdhkHeight, route.Formats); err != nil {
		res = append(res, err)
	}

	fdID, fdhkID, _ := fds.GetOK("id")
	if err := o.bindID(fdID, fdhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdProvider, fdhkProvider, _ := fds.GetOK("provider")
	if err := o.bindProvider(fdProvider, fdhkProvider, route.Formats); err != nil {
		res = append(res, err)
	}

	fdSize, fdhkSize, _ := fds.GetOK("size")
	if err := o.bindSize(fdSize, fdhkSize, route.Formats); err != nil {
		res = append(res, err)
	}

	fdType, fdhkType, _ := fds.GetOK("type")
	if err := o.bindType(fdType, fdhkType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdWidth, fdhkWidth, _ := fds.GetOK("width")
	if err := o.bindWidth(fdWidth, fdhkWidth, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAlt binds and validates parameter Alt from formData.
func (o *PutUploaderFilesParams) bindAlt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Alt = &raw

	return nil
}

// bindCaption binds and validates parameter Caption from formData.
func (o *PutUploaderFilesParams) bindCaption(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Caption = &raw

	return nil
}

// bindFile binds file parameter File.
//
// The only supported validations on files are MinLength and MaxLength
func (o *PutUploaderFilesParams) bindFile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindHeight binds and validates parameter Height from formData.
func (o *PutUploaderFilesParams) bindHeight(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("height", "formData", "float64", raw)
	}
	o.Height = &value

	return nil
}

// bindID binds and validates parameter ID from formData.
func (o *PutUploaderFilesParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ID = &raw

	return nil
}

// bindName binds and validates parameter Name from formData.
func (o *PutUploaderFilesParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	return nil
}

// bindProvider binds and validates parameter Provider from formData.
func (o *PutUploaderFilesParams) bindProvider(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Provider = &raw

	return nil
}

// bindSize binds and validates parameter Size from formData.
func (o *PutUploaderFilesParams) bindSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("size", "formData", "float64", raw)
	}
	o.Size = &value

	return nil
}

// bindType binds and validates parameter Type from formData.
func (o *PutUploaderFilesParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Type = &raw

	return nil
}

// bindWidth binds and validates parameter Width from formData.
func (o *PutUploaderFilesParams) bindWidth(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("width", "formData", "float64", raw)
	}
	o.Width = &value

	return nil
}
